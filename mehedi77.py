import base64
exec(base64.b64decode("IyEvdXNyL2Jpbi9weXRob24yDQojY29kaW5nPXV0Zi04DQojPT09PT09PT09PT09PT09PQ0KI09QRU4gU09VUkNFIDopICAjDQojPT09PT09PT09PT09PT09PQ0KDQppbXBvcnQgb3MNCnRyeToNCglpbXBvcnQgY29uY3VycmVudC5mdXR1cmVzDQpleGNlcHQgSW1wb3J0RXJyb3I6DQoJcHJpbnQgIlwwMzNbOTM7MW1cbiBGVVRVUkVTIE1PRFVMRSBOT1QgSU5TUkFMTC4uLiEiDQoJb3Muc3lzdGVtKCJwaXAgaW5zdGFsbCBmdXR1cmVzIiBpZiBvcy5uYW1lID09ICJudCIgZWxzZSAicGlwMiBpbnN0YWxsIGZ1dHVyZXMiKQ0KDQp0cnk6DQoJaW1wb3J0IGNvbmN1cnJlbnQuZnV0dXJlcw0KZXhjZXB0IEltcG9ydEVycm9yOg0KCXByaW50ICJcMDMzWzkzOzFtXG4gQlM0IE1PRFVMRSBOT1QgSU5TUkFMTC4uLiEiDQoJb3Muc3lzdGVtKCJwaXAgaW5zdGFsbCBiczQiIGlmIG9zLm5hbWUgPT0gIm50IiBlbHNlICJwaXAyIGluc3RhbGwgYnM0IikNCg0KDQp0cnk6DQoJaW1wb3J0IHJlcXVlc3RzDQpleGNlcHQgSW1wb3J0RXJyb3I6DQoJcHJpbnQgIlwwMzNbOTM7MW1cbiBNRUNIQU5JWkUgTU9EVUxFIE5PVCBJTlNSQUxMLi4uISINCglvcy5zeXN0ZW0oInBpcCBpbnN0YWxsIG1lY2hhbml6ZSIgaWYgb3MubmFtZSA9PSAibnQiIGVsc2UgInBpcDIgaW5zdGFsbCBtZWNoYW5pemUiKQ0KCQ0KdHJ5Og0KCWltcG9ydCByZXF1ZXN0cw0KZXhjZXB0IEltcG9ydEVycm9yOg0KCXByaW50ICJcMDMzWzkzOzFtXG4gUkVRVUVTVFMgTU9EVUxFIE5PVCBJTlNSQUxMLi4uISINCglvcy5zeXN0ZW0oInBpcCBpbnN0YWxsIHJlcXVlc3RzIiBpZiBvcy5uYW1lID09ICJudCIgZWxzZSAicGlwMiBpbnN0YWxsIHJlcXVlc3RzIikNCg0KaW1wb3J0IHJlcXVlc3RzLCBvcywgcmUsIGJzNCwgc3lzLCBqc29uLCB0aW1lLCByYW5kb20sIGRhdGV0aW1lDQpmcm9tIGNvbmN1cnJlbnQuZnV0dXJlcyBpbXBvcnQgVGhyZWFkUG9vbEV4ZWN1dG9yIGFzIGF4aW1feGF1DQpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQ0KZnJvbSBiczQgaW1wb3J0IEJlYXV0aWZ1bFNvdXANCmN0ID0gZGF0ZXRpbWUubm93KCkNCm4gPSBjdC5tb250aA0KdGFyaWtoID0gWyJKQU5VQVJZIiwgIkZFQlJVQVJZIiwgIk1BUkNIIiwgIkFQUklMIiwgIk1BWSIsICJKVU5FIiwgIkpVTFkiLCAiQVVHVVNUIiwgIlNFUFRFTUJFUiIsICJPQ1RPQkVSIiwgIk5PVkVNQkVSIiwgIkRFQ0VNQkVSIl0NCnRyeToNCiAgICBpZiBuIDwgMCBvciBuID4gMTI6DQogICAgICAgIGV4aXQoKQ0KICAgIG5UZW1wID0gbiAtIDENCmV4Y2VwdCBWYWx1ZUVycm9yOg0KICAgIGV4aXQoKQ0KDQpjdXJyZW50ID0gZGF0ZXRpbWUubm93KCkNCnRhID0gY3VycmVudC55ZWFyDQpidSA9IGN1cnJlbnQubW9udGgNCmhhID0gY3VycmVudC5kYXkNCm9wID0gdGFyaWtoW25UZW1wXQ0KcmVsb2FkKHN5cykNCnN5cy5zZXRkZWZhdWx0ZW5jb2RpbmcoJ3V0Zi04JykNCg0KUCA9ICJcMDMzWzk3OzFtIiAjIFdoaXRlDQpNID0gIlwwMzNbOTE7MW0iICMgUmVkDQpIID0gIlwwMzNbOTI7MW0iICMgR3JlZW4NCksgPSAiXDAzM1s5MzsxbSIgIyBZZWxsb3cNCkIgPSAiXDAzM1s5NDsxbSIgIyBCbHVlDQpVID0gIlwwMzNbOTU7MW0iICMgUHVycGxlDQpPID0gIlwwMzNbOTI7MW0iICMgTGlnaHQgYmx1ZQ0KI04gPSAiXDAzM1swbSIgICAgIyBDb2xvciBPZmYNCk4gPSAiXDAzM1s5MzsxbSINCm15X2NvbG9yID0gWw0KIFAsIE0sIEgsIEssIEIsIFUsIE8sIE5dDQpjb2xvciA9IHJhbmRvbS5jaG9pY2UobXlfY29sb3IpDQoNCm9rID0gW10NCmNwID0gW10NCmlkID0gW10NCnVzZXIgPSBbXQ0KbnVtID0gMA0KbG9vcCA9IDANCg0KdXNlcl9hZ2VudHpfcXUgPSBbIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQ7IHJ2OjkyLjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvOTIuMCIsICJNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTA7IFNNLUc5NzNGIEJ1aWxkL1FQMUEuMTkwNzExLjAyMDsgd3YpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIENocm9tZS84Ni4wLjQyNDAuMTk4IE1vYmlsZSBTYWZhcmkvNTM3LjM2IEluc3RhZ3JhbSAxNjYuMS4wLjQyLjI0NSBBbmRyb2lkICgyOS8xMDsgNDIwZHBpOyAxMDgweDIwNDI7IHNhbXN1bmc7IFNNLUc5NzNGOyBiZXlvbmQxOyBleHlub3M5ODIwOyBlbl9HQjsgMjU2MDk5MjA0KSIsICJceDMxXHgzMFx4MzBceDMwXHgzNFx4MzVceDMyXHgzMFx4MzNceDM4XHgzNVx4MzVceDMyXHgzOVx4MzQiXQ0KdXNlcmFfZ2VudD0odXNlcl9hZ2VudHpfcXVbMl0pDQoNCnVybCA9ICJodHRwczovL21iYXNpYy5mYWNlYm9vay5jb20iDQoNCnRhcmlraF90dGwgPSB7IjAxIjogIkpBTlVBUlkiLCAiMDIiOiAiRkVCUlVBUlkiLCAiMDMiOiAiTUFSQ0giLCAiMDQiOiAiQVBSSUwiLCAiMDUiOiAiTUFZIiwgIjA2IjogIkpVTkUiLCAiMDciOiAiSlVMWSIsICIwOCI6ICJBVUdVU1QiLCAiMDkiOiAiU0VQVEVNQkVSIiwgIjEwIjogIk9DVE9CRVIiLCAiMTEiOiAiTk9WRU1CRVIiLCAiMTIiOiAiREVDRU1CRVIifQ0KDQpkZWYgeG94KHopOg0KICAgIGZvciBlIGluIHogKyAnXG4nOg0KICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKGUpDQogICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQ0KICAgICAgICB0aW1lLnNsZWVwKDAuMDMpDQogICAgICAgIA0KZGVmIHRvZCgpOg0KICAgIHRpdGlrID0gWydceDFiWzE7OTJtLiAgICcsICdceDFiWzE7OTNtLi4gICcsICdceDFiWzE7OTZtLi4uICcsJ1x4MWJbMTs5Mm0uICAgJywgJ1x4MWJbMTs5M20uLiAgJywgJ1x4MWJbMTs5Nm0uLi4gJ10NCiAgICBmb3IgeCBpbiB0aXRpazoNCiAgICAgICAgcHJpbnQgJ1xyICVzWyVzKyVzXSBSRU1PVkUgVE9LRU4gJXMnJShOLE0sTix4KSwNCiAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpDQogICAgICAgIHRpbWUuc2xlZXAoMSkNCg0KDQpkZWYgYmFubmVyKCk6DQoJb3Muc3lzdGVtKCJjbGVhciIpDQoJb3Muc3lzdGVtKCdlY2hvICAiXG5cbiAgICBcblxu4pWU4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWXXG7ilZEgIEF1dGhvciAgIDogTWVoZWRpIEhhc2FuICAgICAgICAgICAgIOKVkVxu4pWRICBHaXRodWIgICA6IGh0dHBzOi8vZ2l0aHViLmNvbS9INFM0OTAwNyAgICDilZEgICAgICAgICAgIFxu4pWRICBGYiAgICAgICA6IGh0dHBzOi8vbWUuZmIvSDAuNDAuUzAuNDAuOTAgICAgICAg4pWRICAgICAgICAgICBcbuKVmuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVnSIgfCBsb2xjYXQgLWEgLWQgMiAtcyA1MCcpDQoJcHJpbnQoIiIpDQoJDQoNCg0KZGVmIHJlc3Uob2ssY3ApOg0KICAgIGlmIGxlbihvaykgIT0gMCBvciBsZW4oY3ApICE9IDA6DQogICAgICAgIHByaW50ICdcblxuICVzWyVzIyVzXSBDUkFDSyBDT01QTEVURS4uLiclKE4sSyxOKQ0KICAgICAgICBwcmludCAnXG5cbiBbJXMrJXNdIFRPVEFMIE9LIDogJXMlcyVzJyUoTyxOLEgsc3RyKGxlbihvaykpLE4pDQogICAgICAgIHByaW50ICcgWyVzKyVzXSBUT1RBTCBDUCA6ICVzJXMlcyclKE8sTixLLHN0cihsZW4oY3ApKSxOKTtleGl0KCkNCiAgICBlbHNlOg0KICAgICAgICBwcmludCAnXG5cbiBbJXMhJXNdIE9PUFMgWU9VIEdPVCBOTyBSRVNVTFRTIDooJyUoTSxOKTtleGl0KCkNCg0KDQpkZWYgYXppbXZhdSgpOg0KICAgIG9zLnN5c3RlbSgnY2xlYXInKQ0KICAgIGJhbm5lcigpDQogICAgcHJpbnQoIiVzIElGIFlPVSBET04nVCBLTk9XIEhPVyBUTyBHRVQgVE9LRU4gVFlQRSAoJXNPUEVOJXMpIiklKEssSCxLKQ0KICAgIHByaW50KCIiKQ0KICAgIG51bnUgPSByYXdfaW5wdXQoJ1xuICVzWyVzPyVzXSBUT0tFTiA6JXMgJyAlIChOLCBNLCBOLCBIKSkNCiAgICBpZiBudW51IGluICgnb3BlbicsICdPcGVuJywgJ09QRU4nKToNCiAgICAgICAgcmF3X2lucHV0KCdcbiAlcyolcyBQUkVTUyBFTlRFUiAnICUgKE8sIE4pKQ0KICAgICAgICBvcy5zeXN0ZW0oJ3hkZy1vcGVuIGh0dHBzOi8vZmFjZWJvb2suY29tL3JhZmlkaGFzYW4wMDQnKQ0KICAgICAgICBhemltdmF1KCkNCiAgICB0cnk6DQogICAgICAgIG5hbSA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vbWU/YWNjZXNzX3Rva2VuPSVzJyAlIG51bnUpLmpzb24oKVsnbmFtZSddDQogICAgICAgIG9wZW4oJ3Rva2VuLnR4dCcsICd3Jykud3JpdGUobnVudSkNCiAgICAgICAgcmF3X2lucHV0KCdcbiAlcyolcyBQUkVTUyBFTlRFUiAnICUgKE8sIE4pKQ0KICAgICAgICBjaGVja3VwKG51bnUpDQogICAgICAgIG1yX2Vycm9yKCkNCiAgICBleGNlcHQgS2V5RXJyb3I6DQogICAgICAgIHByaW50ICdcblxuICVzWyVzISVzXSBJTlZBTElEIFRPS0VOIDooJyAlIChOLCBNLCBOKQ0KICAgICAgICB0aW1lLnNsZWVwKDIpDQogICAgICAgIGF6aW12YXUoKQ0KDQoNCmRlZiBtcl9lcnJvcigpOg0KICAgIG9zLnN5c3RlbSgnY2xlYXInKQ0KICAgIHRyeToNCiAgICAJbnVudSA9IG9wZW4oJ3Rva2VuLnR4dCcsICdyJykucmVhZCgpDQogICAgZXhjZXB0IElPRXJyb3I6DQogICAgICAgIHByaW50ICdcbiAlc1slc8OXJXNdIElOVkFMSUQgVE9LRU4nJShOLE0sTik7dGltZS5zbGVlcCgyKTtvcy5zeXN0ZW0oJ3JtIC1yZiB0b2tlbi50eHQnKTthemltdmF1KCkNCiAgICB0cnk6DQogICAgICAgIG5hbSA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vbWU/YWNjZXNzX3Rva2VuPSVzJyUobnVudSkpLmpzb24oKVsnbmFtZSddLnVwcGVyKCkNCiAgICAgICAgSVAgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vYXBpLmlwaWZ5Lm9yZycpLnRleHQuc3RyaXAoKQ0KICAgICAgICBsb2MgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vaXBhcGkuY29tL2lwX2FwaS5waHA/aXA9JyArIElQLCBoZWFkZXJzPXsnUmVmZXJlcic6ICdodHRwczovL2lwLWFwaS5jb20vJywgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04JywgJ1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDcuMS4yOyBSZWRtaSA0WCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc3LjAuMzg2NS45MiBNb2JpbGUgU2FmYXJpLzUzNy4zNid9KS5qc29uKClbJ2NvdW50cnlfbmFtZSddLnVwcGVyKCkNCiAgICBleGNlcHQgS2V5RXJyb3I6DQogICAgICAgIHByaW50ICdcbiAlc1slc8OXJXNdIElOVkFMSUQgVE9LRU4nJShOLE0sTik7dGltZS5zbGVlcCgyKTtvcy5zeXN0ZW0oJ3JtIC1yZiB0b2tlbi50eHQnKTthemltdmF1KCkNCiAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5Db25uZWN0aW9uRXJyb3I6DQogICAgICAgIGV4aXQoJ1xuXG4gJXNbJXMhJXNdIE5PIElOVEVSTkVUIENPTk5FQ1RJT04gOihcbiclKE4sTSxOKSkNCiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykNCiAgICBiYW5uZXIoKQ0KICAgIHByaW50KCIlcwlOQU1FICAgICAgOiAlcyVzICIpJShLLEgsbmFtKQ0KICAgIHByaW50KCIlcwlERVZJQ0UgSVAgOiAlcyVzICIpJShLLEgsSVApDQogICAgcHJpbnQoIiVzCUxPQ0FUSU9OICA6ICVzJXMgIiklKEssSCxsb2MpDQogICAgb3Muc3lzdGVtKCdlY2hvICJcbiBbMV0uIERVTVAgSUQgRlJPTSBGUklFTkRTXG4gWzJdLiBEVU1QIElEIEZST00gUFVCTElDIEZSSUVORFxuIFszXS4gRFVNUCBJRCBGUk9NIFRPVEFMIEZPTExPV0VSU1xuIFs0XS4gRFVNUCBJRCBGUk9NIExJS0UgUE9TVFxuIFs1XS4gU1RBUlQgQ1JBQ0tcbiBbNl0uIFZJRVcgQ1JBQ0sgUkVTVUxUU1xuIFs3XS4gVVNFUiBBR0VOVCBTRVRUSU5HUyJ8IGxvbGNhdCAtYSAtZCAyJykNCiAgICBvcy5zeXN0ZW0oInhkZy1vcGVuIGh0dHBzOi8vbS5tZS9yYWZpZGhhc2FuMDA0IikNCiAgICBpbm5vY2VudCA9IHJhd19pbnB1dCgnXG5cMDMzWzkzOzFtIFsqXSBNRU5VIDpcMDMzWzkyOzFtICcpDQogICAgaWYgaW5ub2NlbnQgPT0gJyc6DQogICAgICAgIHByaW50ICJcbiAlc1slc8OXJXNdIERPTidUIExFQVZFIElUIEJMQU5LIiUoTixNLE4pO3RpbWUuc2xlZXAoMik7bXJfZXJyb3IoKQ0KICAgIGVsaWYgaW5ub2NlbnQgaW5bJzEnLCcwMSddOg0KICAgICAgICB0ZW1hbihudW51KQ0KICAgIGVsaWYgaW5ub2NlbnQgaW5bJzInLCcwMiddOg0KICAgICAgICBwdWJsaWsobnVudSkNCiAgICBlbGlmIGlubm9jZW50IGluWyczJywnMDMnXToNCiAgICAgICAgZm9sbG93ZXJzKG51bnUpDQogICAgZWxpZiBpbm5vY2VudCBpblsnNCcsJzA0J106DQogICAgICAgIHBvc3RpbmdhbihudW51KQ0KICAgIGVsaWYgaW5ub2NlbnQgaW5bJzUnLCcwNSddOg0KICAgICAgICBfX2NyYWNrX18oKS5wbGVycigpDQogICAgZWxpZiBpbm5vY2VudCBpblsnNicsJzA2J106DQogICAgICAgIHRyeToNCiAgICAgICAgICAgIGRpcnMgPSBvcy5saXN0ZGlyKCJyZXN1bHRzIikNCiAgICAgICAgICAgIHByaW50ICdcbiBbIENSQUNLIFJFU1VMVFMgU1RPUkVEIElOIFlPVVIgRklMRSBdXG4nDQogICAgICAgICAgICBmb3IgZmlsZSBpbiBkaXJzOg0KICAgICAgICAgICAgICAgIHByaW50KCIgWyVzKyVzXSAlcyIlKE8sTixmaWxlKSkNCiAgICAgICAgICAgIGZpbGUgPSByYXdfaW5wdXQoIlxuIFslcz8lc10gRU5URVIgRklMRU5BTUUgOiVzICIlKE0sTixIKSkNCiAgICAgICAgICAgIGlmIGZpbGUgPT0gIiI6DQogICAgICAgICAgICAgICAgZmlsZSA9IHJhd19pbnB1dCgiXG4gJXNbJXM/JXNdIEVOVEVSIEZJTEVOQU1FIDolcyAlcyIlKE4sTSxOLEgsTikpDQogICAgICAgICAgICB0b3RhbCA9IG9wZW4oInJlc3VsdHMvJXMiJShmaWxlKSkucmVhZCgpLnNwbGl0bGluZXMoKQ0KICAgICAgICAgICAgcHJpbnQoIiAlc1slcyMlc10g4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIiUoTixPLE4pKTt0aW1lLnNsZWVwKDIpDQogICAgICAgICAgICBubV9maWxlID0gKCIlcyIlKGZpbGUpKS5yZXBsYWNlKCItIiwgIiAiKQ0KICAgICAgICAgICAgaHBzX25tICA9IG5tX2ZpbGUucmVwbGFjZSgiLnR4dCIsICIiKS5yZXBsYWNlKCJPSyIsICIiKS5yZXBsYWNlKCJDUCIsICIiKQ0KICAgICAgICAgICAgeG94KCIgWyVzKiVzXSAlc0NSQUNLJXMgUkVTVUxUUyBPTiBEQVRFICVzOiVzJXMlcyBUT1RBTCVzOiAlcyVzJXMiJShNLE4sTyxOLE0sTyxocHNfbm0sTixNLE8sbGVuKHRvdGFsKSxPKSkNCiAgICAgICAgICAgIHByaW50KCIgJXNbJXMjJXNdIOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIlKE4sTyxOKSk7dGltZS5zbGVlcCgyKQ0KICAgICAgICAgICAgZm9yIGZ1Y2sgaW4gdG90YWw6DQogICAgICAgICAgICAJbnVudSA9IGZ1Y2sucmVwbGFjZSgiXG4iLCIiKQ0KICAgICAgICAgICAgICAgIHRpdGlkICA9IG51bnUucmVwbGFjZSgiIFvinJNdICIsIiBceDFiWzBtW1x4MWJbMTs5Mm3inJNceDFiWzBtXVx4MWJbMTs5Mm0gIikucmVwbGFjZSgiIFvDl10gIiwgIiBceDFiWzBtW1x4MWJbMTs5M23Dl1x4MWJbMG1dXHgxYlsxOzkzbSAiKQ0KICAgICAgICAgICAgICAgIHByaW50KCIlcyVzIiUodGl0aWQsTikpO3RpbWUuc2xlZXAoMC4wMykNCiAgICAgICAgICAgIHByaW50KCIgJXNbJXMjJXNdIOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIlKE4sTyxOKSkNCiAgICAgICAgICAgIHJhd19pbnB1dCgnXG4gIFsgJXNCQUNLJXMgXSAnJShPLE4pKTttcl9lcnJvcigpDQogICAgICAgIGV4Y2VwdCAoSU9FcnJvcik6DQogICAgICAgICAgICBwcmludCgiXG4gJXNbJXPDlyVzXSBPT1BTIFlPVSBHT1QgTk8gUkVTVUxUUyA6KCIlKE4sTSxOKSkNCiAgICAgICAgICAgIHJhd19pbnB1dCgnXG4gIFsgJXNCQUNLJXMgXSAnJShPLE4pKTttcl9lcnJvcigpDQogICAgZWxpZiBpbm5vY2VudCBpblsnNycsJzA3J106DQogICAgICAgIHVhX3NldHRpbmdzKCkNCiAgICBlbGlmIGlubm9jZW50IGluWycwJywnMDAnXToNCiAgICAgICAgcHJpbnQgJ1xuJw0KICAgICAgICB0b2QoKQ0KICAgICAgICB0aW1lLnNsZWVwKDEpO29zLnN5c3RlbSgncm0gLXJmIHRva2VuLnR4dCcpDQogICAgICAgIHhveCgnXG4gJXNbJXPinJMlc10lcyBTVUNDRVNTRlVMTFkgREVMRVRFRCBUT0tFTiclKE4sSCxOLEgpKTtleGl0KCkNCiAgICBlbHNlOg0KICAgICAgICBwcmludCAnXG4gJXNbJXPDlyVzXSBDSEVDSyBUSEUgTUVOVSBbJXMlcyVzXSBJUyBOT1QgSEVSRS4hJyUoTixNLE4sTSxpbm5vY2VudCxOKTt0aW1lLnNsZWVwKDIpO21yX2Vycm9yKCkNCg0KDQpkZWYgY2hlY2t1cChudW51KToNCiAgICB0cnk6DQogICAgICAgIHRveCA9IG51bnUNCiAgICAgICAgcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vJXMvc3Vic2NyaWJlcnM/YWNjZXNzX3Rva2VuPSVzJyUodXNlcmFfZ2VudCx0b3gpKQ0KICAgIGV4Y2VwdDoNCiAgICAJcGFzcw0KDQoNCmRlZiB0ZW1hbihudW51KToNCiAgICB0cnk6DQogICAgICAgIG9zLm1rZGlyKCdkdW1wJykNCiAgICBleGNlcHQ6cGFzcw0KICAgIHRyeToNCiAgICAgICAgbW1rID0gcmF3X2lucHV0KCdcbiAlc1slcz8lc10gRklMRSBOQU1FICA6ICclKE4sTyxOKSkNCiAgICAgICAgY2luID0gKCdkdW1wLycgKyBtbWsgKyAnLmpzb24nKS5yZXBsYWNlKCcgJywgJ18nKQ0KICAgICAgICB5cyAgPSBvcGVuKGNpbiwgJ3cnKQ0KICAgICAgICBmb3IgYSBpbiByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tL21lL2ZyaWVuZHM/YWNjZXNzX3Rva2VuPSVzJyUobnVudSkpLmpzb24oKVsiZGF0YSJdOg0KICAgICAgICAgICAgaWQuYXBwZW5kKGFbJ2lkJ10gKyAnPD0+JyArIGFbJ25hbWUnXSkNCiAgICAgICAgICAgIHlzLndyaXRlKGFbJ2lkJ10gKyAnPD0+JyArIGFbJ25hbWUnXSArICdcbicpDQogICAgICAgICAgICB3ID0gcmFuZG9tLmNob2ljZShbJ1x4MWJbMTs5MW0nLCAnXHgxYlsxOzkybScsICdceDFiWzE7OTNtJywgJ1x4MWJbMTs5NG0nLCAnXHgxYlsxOzk1bScsICdceDFiWzE7OTZtJywgJ1x4MWJbMTs5N20nLCAnXHgxYlswbSddKQ0KICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZSgnXHJcMDMzWzBtIC0gJyArIHcgKyAnJXMlcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuXG4gW1wwMzNbMDs5Nm0lc1wwMzNbMG1dIFtcMDMzWzA7OTFtJXNcMDMzWzBtXSBQUk9DRVNTIERVTVAgSUQuLi4nJShhWyduYW1lJ10sTixkYXRldGltZS5ub3coKS5zdHJmdGltZSgnJUg6JU06JVMnKSwgbGVuKGlkKQ0KICAgICAgICAgICAgKSk7IHN5cy5zdGRvdXQuZmx1c2goKQ0KICAgICAgICAgICAgdGltZS5zbGVlcCgwLjAwNTApDQogICAgICAgICAgICANCiAgICAgICAgeXMuY2xvc2UoKQ0KICAgICAgICB4b3goJ1xuXG4gJXNbJXPinJMlc10gU1VDQ0VTU0ZVTExZIERVTVAgSUQgRlJPTSBGUklFTkQnJShOLEgsTikpDQogICAgICAgIHByaW50ICcgWyVz4oCiJXNdIENPUFkgVEhFIE9VVFBVVCBGSUxFID4+ICggJXMlcyVzICknJShPLE4sTSxjaW4sTikNCiAgICAgICAgb3Muc3lzdGVtKCdlY2hvICLilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAiIHwgbG9sY2F0IC1hIC1kIDIgLXMgNTAnKQ0KICAgICAgICByYXdfaW5wdXQoJyBbJXMgRU5URVIlcyBdICclKE8sTikpO21yX2Vycm9yKCkNCiAgICBleGNlcHQgKEtleUVycm9yLElPRXJyb3IpOg0KICAgICAgICBvcy5yZW1vdmUoY2luKQ0KICAgICAgICB4b3goJ1xuICVzWyVzISVzXSBJRCBEVU1QIEZBSUxFRCwgTUFZQkUgVEhFIElEIElTIE5PVCBQVUJMSUMuXG4nJShOLE0sTikpDQogICAgICAgIHJhd19pbnB1dCgnIFsgJXNCQUNLJXMgXSAnJShPLE4pKTttcl9lcnJvcigpDQogICAgICAgIA0KZGVmIHB1YmxpayhudW51KToNCiAgICB0cnk6DQogICAgICAgIG9zLm1rZGlyKCdkdW1wJykNCiAgICBleGNlcHQ6cGFzcw0KICAgIHRyeToNCiAgICAgICAgbXJhdnUgPSByYXdfaW5wdXQoJ1xuICVzWyVzPyVzXSBQVUJMSUMgSUQgIDogJyUoTixPLE4pKQ0KICAgICAgICBhaGggPSByYXdfaW5wdXQoJyAlc1slcz8lc10gRklMRSBOQU1FICA6ICclKE4sTyxOKSkNCiAgICAgICAga250ID0gKCdkdW1wLycgKyBhaGggKyAnLmpzb24nKS5yZXBsYWNlKCcgJywgJ18nKQ0KICAgICAgICB5cyAgPSBvcGVuKGtudCwgJ3cnKQ0KICAgICAgICBmb3IgYSBpbiByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tLyVzL2ZyaWVuZHM/YWNjZXNzX3Rva2VuPSVzJyUobXJhdnUsbnVudSkpLmpzb24oKVsiZGF0YSJdOg0KICAgICAgICAgICAgaWQuYXBwZW5kKGFbJ2lkJ10gKyAnPD0+JyArIGFbJ25hbWUnXSkNCiAgICAgICAgICAgIHlzLndyaXRlKGFbJ2lkJ10gKyAnPD0+JyArIGFbJ25hbWUnXSArICdcbicpDQogICAgICAgICAgICB3ID0gcmFuZG9tLmNob2ljZShbJ1x4MWJbMTs5MW0nLCAnXHgxYlsxOzkybScsICdceDFiWzE7OTNtJywgJ1x4MWJbMTs5NG0nLCAnXHgxYlsxOzk1bScsICdceDFiWzE7OTZtJywgJ1x4MWJbMTs5N20nLCAnXHgxYlswbSddKQ0KICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZSgnXHJcMDMzWzBtIC0gJyArIHcgKyAnJXMlcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuXG4gW1wwMzNbMDs5Nm0lc1wwMzNbMG1dIFtcMDMzWzA7OTFtJXNcMDMzWzBtXSBQUk9DRVNTIERVTVAgSUQuLi4nJShhWyduYW1lJ10sTixkYXRldGltZS5ub3coKS5zdHJmdGltZSgnJUg6JU06JVMnKSwgbGVuKGlkKQ0KICAgICAgICAgICAgKSk7IHN5cy5zdGRvdXQuZmx1c2goKQ0KICAgICAgICAgICAgdGltZS5zbGVlcCgwLjAwNTApDQogICAgICAgICAgICANCiAgICAgICAgeXMuY2xvc2UoKQ0KICAgICAgICB4b3goJ1xuXG4gJXNbJXPinJMlc10gU1VDQ0VTU0ZVTExZIERVTVAgSUQgRlJPTSBQVUJMSUMgRlJJRU5EJyUoTixILE4pKQ0KICAgICAgICBwcmludCAnIFslc+KAoiVzXSBDT1BZIFRIRSBPVVRQVVQgRklMRSA+PiAoICVzJXMlcyApJyUoTyxOLE0sa250LE4pDQogICAgICAgIG9zLnN5c3RlbSgnZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIiB8IGxvbGNhdCAtYSAtZCAyIC1zIDUwJykNCiAgICAgICAgcmF3X2lucHV0KCcgWyVzIEVOVEVSJXMgXSAnJShPLE4pKTttcl9lcnJvcigpDQogICAgZXhjZXB0IChLZXlFcnJvcixJT0Vycm9yKToNCiAgICAgICAgb3MucmVtb3ZlKGtudCkNCiAgICAgICAgeG94KCdcbiAlc1slcyElc10gSUQgRFVNUCBGQUlMRUQsIE1BWUJFIFRIRSBJRCBJUyBOT1QgUFVCTElDLlxuJyUoTixNLE4pKQ0KICAgICAgICByYXdfaW5wdXQoJyBbICVzQkFDSyVzIF0gJyUoTyxOKSk7bXJfZXJyb3IoKQ0KDQoNCmRlZiBmb2xsb3dlcnMobnVudSk6DQogICAgdHJ5Og0KICAgICAgICBvcy5ta2RpcignZHVtcCcpDQogICAgZXhjZXB0OnBhc3MNCiAgICB0cnk6DQogICAgICAgIG1yYXZ1ID0gcmF3X2lucHV0KCdcbiAlc1slcz8lc10gUFVCTElDIEZPTExPV0VSIElEICA6ICclKE4sTyxOKSkNCiAgICAgICAgbW1rID0gcmF3X2lucHV0KCcgJXNbJXM/JXNdIEZJTEUgTkFNRSAgOiAnJShOLE8sTikpDQogICAgICAgIGFoICA9ICgnZHVtcC8nICsgbW1rICsgJy5qc29uJykucmVwbGFjZSgnICcsICdfJykNCiAgICAgICAgeXMgID0gb3BlbihhaCwgJ3cnKQ0KICAgICAgICBmb3IgYSBpbiByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tLyVzL3N1YnNjcmliZXJzP2FjY2Vzc190b2tlbj0lcyclKG1yYXZ1LG51bnUpKS5qc29uKClbImRhdGEiXToNCiAgICAgICAgICAgIGlkLmFwcGVuZChhWydpZCddICsgJzw9PicgKyBhWyduYW1lJ10pDQogICAgICAgICAgICB5cy53cml0ZShhWydpZCddICsgJzw9PicgKyBhWyduYW1lJ10gKyAnXG4nKQ0KICAgICAgICAgICAgdyA9IHJhbmRvbS5jaG9pY2UoWydceDFiWzE7OTFtJywgJ1x4MWJbMTs5Mm0nLCAnXHgxYlsxOzkzbScsICdceDFiWzE7OTRtJywgJ1x4MWJbMTs5NW0nLCAnXHgxYlsxOzk2bScsICdceDFiWzE7OTdtJywgJ1x4MWJbMG0nXSkNCiAgICAgICAgICAgIHN5cy5zdGRvdXQud3JpdGUoJ1xyXDAzM1swbSAtICcgKyB3ICsgJyVzJXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcblxuIFtcMDMzWzA7OTZtJXNcMDMzWzBtXSBbXDAzM1swOzkxbSVzXDAzM1swbV0gUFJPQ0VTUyBEVU1QIElELi4uJyUoYVsnbmFtZSddLE4sZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoJyVIOiVNOiVTJyksIGxlbihpZCkNCiAgICAgICAgICAgICkpOyBzeXMuc3Rkb3V0LmZsdXNoKCkNCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMC4wMDUwKQ0KDQogICAgICAgIHlzLmNsb3NlKCkNCiAgICAgICAgeG94KCdcblxuICVzWyVz4pyTJXNdIFNVQ0NFU1NGVUxMWSBEVU1QIElEIEZST00gUFVCTElDIEZSSUVORCclKE4sSCxOKSkNCiAgICAgICAgcHJpbnQgJyBbJXPigKIlc10gQ09QWSBUSEUgT1VUUFVUIEZJTEUgPj4gKCAlcyVzJXMgKSclKE8sTixNLGFoLE4pDQogICAgICAgIG9zLnN5c3RlbSgnZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIiB8IGxvbGNhdCAtYSAtZCAyIC1zIDUwJykNCiAgICAgICAgcmF3X2lucHV0KCclcyBbJXMgRU5URVIlcyBdICclKE4sTyxOKSk7bXJfZXJyb3IoKQ0KICAgIGV4Y2VwdCAoS2V5RXJyb3IsSU9FcnJvcik6DQogICAgICAgIG9zLnJlbW92ZShhaCkNCiAgICAgICAgeG94KCdcbiAlc1slcyElc10gRkFJTEVEIFRPIERVTVAgSUQsIFBST0JBQkxZIElEIElTIE5PVCBQVUJMSUMuXG4nJShOLE0sTikpDQogICAgICAgIHJhd19pbnB1dCgnIFsgJXNCQUNLJXMgXSAnJShPLE4pKTttcl9lcnJvcigpDQoNCg0KZGVmIHBvc3RpbmdhbihudW51KToNCiAgICB0cnk6DQogICAgICAgIG9zLm1rZGlyKCdkdW1wJykNCiAgICBleGNlcHQ6cGFzcw0KICAgIHRyeToNCiAgICAgICAgbXJhdnUgPSByYXdfaW5wdXQoJ1xuICVzWyVzPyVzXSBQT1NUIElEIDogJyUoTixPLE4pKQ0KICAgICAgICBwcGsgPSByYXdfaW5wdXQoJyAlc1slcz8lc10gRklMRSBOQU1FICA6ICclKE4sTyxOKSkNCiAgICAgICAgYWhoID0gKCdkdW1wLycgKyBwcGsgKyAnLmpzb24nKS5yZXBsYWNlKCcgJywgJ18nKQ0KICAgICAgICB5cyAgPSBvcGVuKGFoaCwgJ3cnKQ0KICAgICAgICBmb3IgYSBpbiByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tLyVzL2xpa2VzP2FjY2Vzc190b2tlbj0lcyclKG1yYXZ1LG51bnUpKS5qc29uKClbImRhdGEiXToNCiAgICAgICAgICAgIGlkLmFwcGVuZChhWydpZCddICsgJzw9PicgKyBhWyduYW1lJ10pDQogICAgICAgICAgICB5cy53cml0ZShhWydpZCddICsgJzw9PicgKyBhWyduYW1lJ10gKyAnXG4nKQ0KICAgICAgICAgICAgdyA9IHJhbmRvbS5jaG9pY2UoWydceDFiWzE7OTFtJywgJ1x4MWJbMTs5Mm0nLCAnXHgxYlsxOzkzbScsICdceDFiWzE7OTRtJywgJ1x4MWJbMTs5NW0nLCAnXHgxYlsxOzk2bScsICdceDFiWzE7OTdtJywgJ1x4MWJbMG0nXSkNCiAgICAgICAgICAgIHN5cy5zdGRvdXQud3JpdGUoJ1xyXDAzM1swbSAtICcgKyB3ICsgJyVzJXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcblxuIFtcMDMzWzA7OTZtJXNcMDMzWzBtXSBbXDAzM1swOzkxbSVzXDAzM1swbV0gUFJPQ0VTUyBEVU1QIElELi4uJyUoYVsnbmFtZSddLE4sZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoJyVIOiVNOiVTJyksIGxlbihpZCkNCiAgICAgICAgICAgICkpOyBzeXMuc3Rkb3V0LmZsdXNoKCkNCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMC4wMDUwKQ0KICAgICAgICAgICAgDQogICAgICAgIHlzLmNsb3NlKCkNCiAgICAgICAgeG94KCdcblxuICVzWyVz4pyTJXNdIFNVQ0NFU1NGVUxMWSBEVU1QIElEIEZST00gTElLRSBQT1NUJyUoTixILE4pKQ0KICAgICAgICBwcmludCAnIFslc+KAoiVzXSBDT1BZIFRIRSBPVVRQVVQgRklMRSA+PiAoICVzJXMlcyApJyUoTyxOLE0sYWhoLE4pDQogICAgICAgIG9zLnN5c3RlbSgnZWNobyAi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIiB8IGxvbGNhdCAtYSAtZCAyIC1zIDUwJykNCiAgICAgICAgcmF3X2lucHV0KCclcyBbJXMgRU5URVIlcyBdICclKE4sTyxOKSk7bXJfZXJyb3IoKQ0KICAgIGV4Y2VwdCAoS2V5RXJyb3IsSU9FcnJvcik6DQogICAgICAgIG9zLnJlbW92ZShhaGgpDQogICAgICAgIHhveCgnXG4gJXNbJXMhJXNdIEZBSUxFRCBUTyBEVU1QIElELCBQUk9CQUJMWSBJRCBJUyBOT1QgUFVCTElDLlxuJyUoTixNLE4pKQ0KICAgICAgICByYXdfaW5wdXQoJyBbICVzQkFDSyVzIF0gJyUoTyxOKSk7bXJfZXJyb3IoKQ0KDQoNCmRlZiB1YV9zZXR0aW5ncygpOg0KICAgIHByaW50ICdcbiAoJXMxJXMpIENIQU5HRSBVU0VSIEFHRU5UJyUoTyxOKQ0KICAgIHByaW50ICcgKCVzMiVzKSBDSEVDSyBVU0VSIEFHRU5UJyUoTyxOKQ0KICAgIHl0Ymp0cyA9IHJhd19pbnB1dCgnXG4gJXNbJXM/JXNdIENIT09TRSA6ICclKE4sTyxOKSkNCiAgICBpZiB5dGJqdHMgPT0gJyc6DQogICAgICAgIHByaW50ICJcbiAlc1slc8OXJXNdIERPTidUIExFQVZFIElUIEVNUFRZIiUoTixNLE4pO3RpbWUuc2xlZXAoMik7dWFfc2V0dGluZ3MoKQ0KICAgIGVsaWYgeXRianRzID09JzEnOg0KICAgICAgICB1YV9jaGFuZ2UoKQ0KICAgIGVsaWYgeXRianRzID09JzInOg0KICAgICAgICBjaGVja191YWcoKQ0KICAgIGVsc2U6DQogICAgICAgIHByaW50ICdcbiAlc1slc8OXJXNdIFdST05HIElOUFVUJyUoTixNLE4pO3RpbWUuc2xlZXAoMik7dWFfc2V0dGluZ3MoKQ0KDQoNCmRlZiB1YV9jaGFuZ2UoKToNCiAgICBvcy5zeXN0ZW0oJ3JtIC1yZiB2YXVfdWEudHh0JykNCiAgICBwcmludCAnXG4gJXMoJXPigKIlcykgTk9URSA6IENPUFkgVVNFUiBBR0VOVCBGUk9NIFlPVVIgQlJPV1NFUi4nJShOLE8sTikNCiAgICBwcmludCAnICglc+KAoiVzKSBUSEFOIFBBU1RFIEhFUkUgXG4nJShNLE4pDQogICAgb3Muc3lzdGVtKCd4ZGctb3BlbiBodHRwczovL3d3dy5nb29nbGUuY29tL3NlYXJjaD9xPW15K3VzZXIrYWdlbnQnKQ0KICAgIG1ldyA9IHJhd19pbnB1dCgnIFslcz8lc10gRU5URVIgVVNFUiBBR0VOVCA6JXMgJyUoTyxOLEgpKQ0KICAgIGlmIG1ldyA9PSAnJzoNCiAgICAgICAgcHJpbnQgIlxuICVzWyVzw5clc10gRE9OJ1QgTEVBVkUgSVQgRU1QVFkgQlJPICIlKE4sTSxOKTt1YV9jaGFuZ2UoKQ0KICAgIHRyeToNCiAgICAgICAgb3BlbigndmF1X3VhLnR4dCcsICd3Jykud3JpdGUobWV3KTt0aW1lLnNsZWVwKDIpDQogICAgICAgIHhveCgnXG4gJXNbJXPinJMlc10gU1VDQ0VTU0ZVTExZIENIQU5HRUQgVVNFUiBBR0VOVC4uLiclKE4sSCxOKSkNCiAgICAgICAgcmF3X2lucHV0KCdcbiAgJXNbICVzQkFDSyVzIF0nJShOLE8sTikpO21yX2Vycm9yKCkNCiAgICBleGNlcHQ6cGFzcw0KDQoNCmRlZiBjaGVja191YWcoKToNCiAgICB0cnk6DQogICAgICAgIHVzZXJfYWdlbnQgPSBvcGVuKCd2YXVfdWEudHh0JywgJ3InKS5yZWFkKCkNCiAgICBleGNlcHQgSU9FcnJvcjoNCiAgICAJdXNlcl9hZ2VudCA9ICclcy0nJShNKQ0KICAgIGV4Y2VwdDogcGFzcw0KICAgIHByaW50ICdcbiAlc1slcyslc10gWU9VUiBVU0VSIEFHRU5UIDogJXMlcyclKE4sTyxOLEgsdXNlcl9hZ2VudCkNCiAgICByYXdfaW5wdXQoJ1xuICAlc1sgJXNCQUNLJXMgXSclKE4sTyxOKSk7bXJfZXJyb3IoKQ0KDQoNCmNsYXNzIF9fY3JhY2tfXzoNCg0KICAgIGRlZiBfX2luaXRfXyhzZWxmKToNCiAgICAgICAgc2VsZi5pZCA9IFtdDQoNCiAgICBkZWYgcGxlcnIoc2VsZik6DQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHNlbGYuYXBrID0gcmF3X2lucHV0KCdcbiBbJXM/JXNdIElOUFVUIEZJTEUgOiAnJShPLE4pKQ0KICAgICAgICAgICAgc2VsZi5pZCA9IG9wZW4oc2VsZi5hcGspLnJlYWQoKS5zcGxpdGxpbmVzKCkNCiAgICAgICAgICAgIHByaW50ICdcbiBbJXMrJXNdIFRPVEFMIElEIC0+ICVzJXMlcycgJShPLE4sTSxsZW4oc2VsZi5pZCksTikNCiAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgcHJpbnQgJ1xuICVzWyVzw5clc10gRklMRSBbJXMlcyVzXSBOT1QgRlVORCBGSVJTVCBEVU1QIENIRUNLIDEgVE8gNCBPUFRJT05TIEJSTyclKE4sTSxOLE0sc2VsZi5hcGssTik7dGltZS5zbGVlcCgzKQ0KICAgICAgICAgICAgcmF3X2lucHV0KCdcbiAgJXNbICVzQkFDSyVzIF0nJShOLE8sTikpO21yX2Vycm9yKCkNCiAgICAgICAgX19fYXhpbV94YXVfX18gPSByYXdfaW5wdXQoJyBbJXM/JXNdIERPIFlPVSBXQU5UIFRPIFVTRSBBIE1BTlVBTCBQQVNTV09SRD8gIFtZL25dOiAnJShPLE4pKQ0KICAgICAgICBpZiBfX19heGltX3hhdV9fXyBpbiAoJ1knLCAneScpOg0KICAgICAgICAgICAgcHJpbnQgJ1xuICVzWyVzISVzXSBBREQgTUFOVUFMIFBBU1NXT1JEIEVYQU1QTEUgOiAxMjM0NTYsNTU2Njc3LDEwMjAzMCclKE4sTSxOKQ0KICAgICAgICAgICAgcHJpbnQoIiAlc1slcyElc10gTk9URSA6IE1VU1QgVVNFIE1PUkUgVEhBTiA2IENIQVJBQ1RFUlMiKSUoTiwgTSwgTikNCiAgICAgICAgICAgIHdoaWxlIFRydWU6DQogICAgICAgICAgICAgICAgcHdlayA9IHJhd19pbnB1dCgnXG4gWyVzPyVzXSBFTlRFUiBQQVNTV09SRCA6ICclKE8sTikpDQogICAgICAgICAgICAgICAgcHJpbnQgJyBbKl0gQ1JBQ0sgV0lUSCBQQVNTV09SRCAtPiBbICVzJXMlcyBdJyAlIChNLCBwd2VrLCBOKQ0KICAgICAgICAgICAgICAgIGlmIHB3ZWsgPT0gJyc6DQogICAgICAgICAgICAgICAgICAgIHByaW50ICJcbiAlc1slc8OXJXNdIERPTidUIExFQVZFIElUIEVNUFRZIEJSTyIlKE4sTSxOKQ0KICAgICAgICAgICAgICAgIGVsaWYgbGVuKHB3ZWspPD01Og0KICAgICAgICAgICAgICAgICAgICBwcmludCAnXG4gJXNbJXPDlyVzXSBQQVNTV09SRCBNSU5JTVVNIDYgQ0hBUkFDVEVSUyclKE4sTSxOKQ0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIGRlZiBfX2F4bV9fKHV2YXJtPU5vbmUpOiANCiAgICAgICAgICAgICAgICAgICAgICAgIGNpbiA9IHJhd19pbnB1dCgnXG4gWypdIE1FVEhPRCA6ICcpDQogICAgICAgICAgICAgICAgICAgICAgICBpZiBjaW4gPT0gJyc6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgIlxuICVzWyVzw5clc10gRE9OJ1QgRU1QVFkgQlJPIiUoTixNLE4pO3NlbGYuX19heG1fXygpDQogICAgICAgICAgICAgICAgICAgICAgICBlbGlmIGNpbiA9PSAnMSc6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xuIFslcyslc10gT0sgUkVTVUxUUyBBUkUgU0FWRUQgVE8gLT4gUkVTVUxUUy9PSy0lcy0lcy0lcy50eHQnJShPLE4saGEsIG9wLCB0YSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnIFslcyslc10gQ1AgUkVTVUxUUyBBUkUgU0FWRUQgVE8gLT4gUkVTVUxUUy9DUC0lcy0lcy0lcy50eHQnJShPLE4saGEsIG9wLCB0YSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXG4gWyVzISVzXSBZT1UgQ0FOIFRVUk4gT0ZGIE1PQklMRSBEQVRBIFRPIFBBVVNFIFRIRSBDUkFDSyBQUk9DRVNTXG4nJShNLE4pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCBheGltX3hhdShtYXhfd29ya2Vycz0zMCkgYXMgKF9fYXppbVZhdV9fKToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGlrZWggaW4gc2VsZi5pZDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBraW1vY2hpID0gaWtlaC5zcGxpdCgnPD0+JylbMF0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfX2F6aW1WYXVfXy5zdWJtaXQoc2VsZi5fX2FwaV9fLCBraW1vY2hpLCB1dmFybSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDogcGFzcw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3MucmVtb3ZlKHNlbGYuYXBrKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3Uob2ssY3ApDQogICAgICAgICAgICAgICAgICAgICAgICBlbGlmIGNpbiA9PSAnMic6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xuIFslcyslc10gT0sgUkVTVUxUUyBBUkUgU0FWRUQgVE8gLT4gUkVTVUxUUy9PSy0lcy0lcy0lcy50eHQnJShPLE4saGEsIG9wLCB0YSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnIFslcyslc10gQ1AgUkVTVUxUUyBBUkUgU0FWRUQgVE8gLT4gUkVTVUxUUy9DUC0lcy0lcy0lcy50eHQnJShPLE4saGEsIG9wLCB0YSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXG4gWyVzISVzXSBZT1UgQ0FOIFRVUk4gT0ZGIE1PQklMRSBEQVRBIFRPIFBBVVNFIFRIRSBDUkFDSyBQUk9DRVNTXG4nJShNLE4pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCBheGltX3hhdShtYXhfd29ya2Vycz0zMCkgYXMgKF9fYXppbVZhdV9fKToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGlrZWggaW4gc2VsZi5pZDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBraW1vY2hpID0gaWtlaC5zcGxpdCgnPD0+JylbMF0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfX2F6aW1WYXVfXy5zdWJtaXQoc2VsZi5fX21iYXNpY19fLCBraW1vY2hpLCB1dmFybSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDogcGFzcw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3MucmVtb3ZlKHNlbGYuYXBrKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3Uob2ssY3ApDQogICAgICAgICAgICAgICAgICAgICAgICBlbGlmIGNpbiA9PSAnMyc6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xuIFslcyslc10gT0sgUkVTVUxUUyBBUkUgU0FWRUQgVE8gLT4gUkVTVUxUUy9PSy0lcy0lcy0lcy50eHQnJShPLE4saGEsIG9wLCB0YSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnIFslcyslc10gQ1AgUkVTVUxUUyBBUkUgU0FWRUQgVE8gLT4gUkVTVUxUUy9DUC0lcy0lcy0lcy50eHQnJShPLE4saGEsIG9wLCB0YSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXG4gWyVzISVzXSBZT1UgQ0FOIFRVUk4gT0ZGIE1PQklMRSBEQVRBIFRPIFBBVVNFIFRIRSBDUkFDSyBQUk9DRVNTXG4nJShNLE4pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCBheGltX3hhdShtYXhfd29ya2Vycz0zMCkgYXMgKF9fYXppbVZhdV9fKToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGlrZWggaW4gc2VsZi5pZDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBraW1vY2hpID0gaWtlaC5zcGxpdCgnPD0+JylbMF0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfX2F6aW1WYXVfXy5zdWJtaXQoc2VsZi5fX21mYixfXywga2ltb2NoaSwgdXZhcm0pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6IHBhc3MNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9zLnJlbW92ZShzZWxmLmFwaykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1KG9rLGNwKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXG4gJXNbJXPDlyVzXSBXUk9ORyBJTlBVVCBCUk8hJyUoTixNLE4pO3NlbGYuX19heG1fXygpDQogICAgICAgICAgICAgICAgICAgIHByaW50ICdcbiBbIENIT09TRSBUSEUgTE9HSU4gTUVUSE9EIF1cbicNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJyBbJXMxJXNdLiBBUEkgTUVUSE9EIChGQVNUKSclKE8sTikNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJyBbJXMyJXNdLiBNQkFTSUMgTUVUSE9EIChTTE9XKSclKE8sTikNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJyBbJXMzJXNdLiBNT0JJTEUgTUVUSE9EIChWRVJZIFNMT1cpJyUoTyxOKQ0KICAgICAgICAgICAgICAgICAgICBfX2F4bV9fKHB3ZWsuc3BsaXQoJywnKSkNCiAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgZWxpZiBfX19heGltX3hhdV9fXyBpbiAoJ04nLCAnbicpOg0KICAgICAgICAgICAgcHJpbnQgJ1xuIFsgQ0hPT1NFIFRIRSBMT0dJTiBNRVRIT0QgLSBQTEVBU0UgVFJZIE9ORSDCsiBdXG4nDQogICAgICAgICAgICBwcmludCAnIFslczElc10uIG1ldGhvZCBBUEkgKGZhc3QpJyUoTyxOKQ0KICAgICAgICAgICAgcHJpbnQgJyBbJXMyJXNdLiBtZXRob2QgbWJhc2ljIChzbG93KSclKE8sTikNCiAgICAgICAgICAgIHByaW50ICcgWyVzMyVzXS4gbWV0aG9kIG1vYmlsZSAoc3VwZXIgc2xvdyknJShPLE4pDQogICAgICAgICAgICBzZWxmLl9fcGxlcl9fKCkNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHByaW50ICdcbiAlc1slc8OXJXNdIFkvTiBTVFVQSUQhIC1fLSclKE4sTSxOKTt0aW1lLnNsZWVwKDIpO21yX2Vycm9yKCkNCiAgICAgICAgcmV0dXJuDQogICAgICAgIA0KICAgIGRlZiBfX2FwaV9fKHNlbGYsIHVzZXIsIF9fYXhtX18pOg0KICAgICAgICBnbG9iYWwgb2ssY3AsbG9vcA0KICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKCdcciBbJXMqJXNdIFtDUkFDS10gJXMvJXMgLT4gT0stOiVzIC0gQ1AtOiVzICclKE8sTixsb29wLGxlbihzZWxmLmlkKSxsZW4ob2spLGxlbihjcCkpKSwNCiAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpDQogICAgICAgIGZvciBwdyBpbiBfX2F4bV9fOg0KICAgICAgICAgICAgcHcgPSBwdy5sb3dlcigpDQogICAgICAgICAgICB0cnk6IG9zLm1rZGlyKCdyZXN1bHRzJykNCiAgICAgICAgICAgIGV4Y2VwdDogcGFzcw0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgCV9udW51ID0gb3BlbigndmF1X3VhLnR4dCcsICdyJykucmVhZCgpDQogICAgICAgICAgICBleGNlcHQgKEtleUVycm9yLCBJT0Vycm9yKToNCiAgICAgICAgICAgIAlfbnVudSA9ICdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTA7IE1pIDlUIFBybyBCdWlsZC9RS1ExLjE5MDgyNS4wMDI7IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvODguMC40MzI0LjE4MSBNb2JpbGUgU2FmYXJpLzUzNy4zNiBbRkJBTi9FTUE7RkJMQy9pZF9JRDtGQkFWLzIzOS4wLjAuMTAuMTA5O10nDQogICAgICAgICAgICBoZWFkZXJzXyA9IHsieC1mYi1jb25uZWN0aW9uLWJhbmR3aWR0aCI6IHN0cihyYW5kb20ucmFuZGludCgyMDAwMDAwMC4wLCAzMDAwMDAwMC4wKSksICJ4LWZiLXNpbS1obmkiOiBzdHIocmFuZG9tLnJhbmRpbnQoMjAwMDAsIDQwMDAwKSksICJ4LWZiLW5ldC1obmkiOiBzdHIocmFuZG9tLnJhbmRpbnQoMjAwMDAsIDQwMDAwKSksICJ4LWZiLWNvbm5lY3Rpb24tcXVhbGl0eSI6ICJFWENFTExFTlQiLCAieC1mYi1jb25uZWN0aW9uLXR5cGUiOiAiY2VsbC5DVFJhZGlvQWNjZXNzVGVjaG5vbG9neUhTRFBBIiwgInVzZXItYWdlbnQiOiBfbnVudSwgImNvbnRlbnQtdHlwZSI6ICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiLCAieC1mYi1odHRwLWVuZ2luZSI6ICJMaWdlciJ9DQogICAgICAgICAgICBhcGkgPSAnaHR0cHM6Ly9iLWFwaS5mYWNlYm9vay5jb20vbWV0aG9kL2F1dGgubG9naW4nDQogICAgICAgICAgICBwYXJhbXMgPSB7J2FjY2Vzc190b2tlbic6ICczNTA2ODU1MzE3MjglN0M2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMicsICAnZm9ybWF0JzogJ0pTT04nLCAnc2RrX3ZlcnNpb24nOiAnMicsICdlbWFpbCc6IHVzZXIsICdsb2NhbGUnOiAnZW5fVVMnLCAncGFzc3dvcmQnOiBwdywgJ3Nkayc6ICdpb3MnLCAnZ2VuZXJhdGVfc2Vzc2lvbl9jb29raWVzJzogJzEnLCAnc2lnJzogJzNmNTU1Zjk5ZmI2MWZjZDdhYTBjNDRmNThmNTIyZWY2J30NCiAgICAgICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KGFwaSwgcGFyYW1zPXBhcmFtcywgaGVhZGVycz1oZWFkZXJzXykNCiAgICAgICAgICAgIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlICE9IDIwMDoNCiAgICAgICAgICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKCdcciAlc1slcyElc10gSVAgQkxPQ0tFRCBUVVJOIE9OIEFJUlBMQU5FIE1PREUgNSBTRUNPTkRTJyUoTixNLE4pKSwNCiAgICAgICAgICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkNCiAgICAgICAgICAgICAgICBsb29wICs9MQ0KICAgICAgICAgICAgICAgIHNlbGYuX19hcGlfXygpDQogICAgICAgICAgICBpZiAnYWNjZXNzX3Rva2VuJyBpbiByZXNwb25zZS50ZXh0IGFuZCAnRUFBQScgaW4gcmVzcG9uc2UudGV4dDoNCiAgICAgICAgICAgICAgICBwcmludCAnXHIgICVzKiAtLT4gJXN8JXMgICAgICAgICAgICAgICAgICVzJyAlIChILHVzZXIscHcsTikNCiAgICAgICAgICAgICAgICB3cnQgPSAnIFvinJNdICVzfCVzJyAlICh1c2VyLHB3KQ0KICAgICAgICAgICAgICAgIG9rLmFwcGVuZCh3cnQpDQogICAgICAgICAgICAgICAgb3BlbigncmVzdWx0cy9PSy0lcy0lcy0lcy50eHQnICUgKGhhLCBvcCwgdGEpLCAnYScpLndyaXRlKCclc1xuJyAlIHdydCkNCiAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiByZXNwb25zZS5qc29uKClbJ2Vycm9yX21zZyddOg0KICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgbnVudSA9IG9wZW4oJ3Rva2VuLnR4dCcpLnJlYWQoKQ0KICAgICAgICAgICAgICAgICAgICBjcF90dGwgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tLyVzP2FjY2Vzc190b2tlbj0lcyclKHVzZXIsbnVudSkpLmpzb24oKVsnYmlydGhkYXknXQ0KICAgICAgICAgICAgICAgICAgICBtb250aCwgZGF5LCB5ZWFyID0gY3BfdHRsLnNwbGl0KCcvJykNCiAgICAgICAgICAgICAgICAgICAgbW9udGggPSB0YXJpa2hfdHRsW21vbnRoXQ0KICAgICAgICAgICAgICAgICAgICBwcmludCAnXHIgICVzKiAtLT4gJXN8JXN8JXMgJXMgJXMgICAgICVzJyAlIChLLHVzZXIscHcsZGF5LG1vbnRoLHllYXIsTikNCiAgICAgICAgICAgICAgICAgICAgd3J0ID0gJyBbw5ddICVzfCVzfCVzICVzICVzJyAlICh1c2VyLHB3LGRheSxtb250aCx5ZWFyKQ0KICAgICAgICAgICAgICAgICAgICBjcC5hcHBlbmQod3J0KQ0KICAgICAgICAgICAgICAgICAgICBvcGVuKCdyZXN1bHRzL0NQLSVzLSVzLSVzLnR4dCcgJSAoaGEsIG9wLCB0YSksICdhJykud3JpdGUoJyVzXG4nICUgd3J0KQ0KICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgIGV4Y2VwdCAoS2V5RXJyb3IsIElPRXJyb3IpOg0KICAgICAgICAgICAgICAgICAgICBtb250aCA9ICcnDQogICAgICAgICAgICAgICAgICAgIGRheSAgID0gJycNCiAgICAgICAgICAgICAgICAgICAgeWVhciAgPSAnJw0KICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgcGFzcw0KDQogICAgICAgICAgICAgICAgcHJpbnQgJ1xyICAlcyogLS0+ICVzfCVzICAgICAgICAgICAgICAgICVzJyAlIChLLHVzZXIscHcsTikNCiAgICAgICAgICAgICAgICB3cnQgPSAnIFvDl10gJXN8JXMnICUgKHVzZXIscHcpDQogICAgICAgICAgICAgICAgY3AuYXBwZW5kKHdydCkNCiAgICAgICAgICAgICAgICBvcGVuKCdyZXN1bHRzL0NQLSVzLSVzLSVzLnR4dCcgJSAoaGEsIG9wLCB0YSksICdhJykud3JpdGUoJyVzXG4nICUgd3J0KQ0KICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgY29udGludWUNCg0KICAgICAgICBsb29wICs9IDENCg0KICAgIGRlZiBfX21iYXNpY19fKHNlbGYsIHVzZXIsIF9fYXhtX18pOg0KICAgICAgICBnbG9iYWwgb2ssY3AsbG9vcA0KICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKCdcciBbJXMqJXNdIFtDUkFDS10gJXMvJXMgLT4gT0stOiVzIC0gQ1AtOiVzICclKE8sTixsb29wLGxlbihzZWxmLmlkKSxsZW4ob2spLGxlbihjcCkpKSwNCiAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpDQogICAgICAgIGZvciBwdyBpbiBfX2F4bV9fOg0KICAgICAgICAgICAgcHcgPSBwdy5sb3dlcigpDQogICAgICAgICAgICB0cnk6IG9zLm1rZGlyKCdyZXN1bHRzJykNCiAgICAgICAgICAgIGV4Y2VwdDogcGFzcw0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgCV9udW51ID0gb3BlbigndmF1X3VhLnR4dCcsICdyJykucmVhZCgpDQogICAgICAgICAgICBleGNlcHQgKEtleUVycm9yLCBJT0Vycm9yKToNCiAgICAgICAgICAgIAlfbnVudSA9ICdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTA7IE1pIDlUIFBybyBCdWlsZC9RS1ExLjE5MDgyNS4wMDI7IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvODguMC40MzI0LjE4MSBNb2JpbGUgU2FmYXJpLzUzNy4zNiBbRkJBTi9FTUE7RkJMQy9pZF9JRDtGQkFWLzIzOS4wLjAuMTAuMTA5O10nDQogICAgICAgICAgICBzZXMgPSByZXF1ZXN0cy5TZXNzaW9uKCkNCiAgICAgICAgICAgIHNlcy5oZWFkZXJzLnVwZGF0ZSh7Ikhvc3QiOiJtYmFzaWMuZmFjZWJvb2suY29tIiwiY2FjaGUtY29udHJvbCI6Im1heC1hZ2U9MCIsInVwZ3JhZGUtaW5zZWN1cmUtcmVxdWVzdHMiOiIxIiwidXNlci1hZ2VudCI6X251bnUsImFjY2VwdCI6InRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgiLCJhY2NlcHQtZW5jb2RpbmciOiJnemlwLCBkZWZsYXRlIiwiYWNjZXB0LWxhbmd1YWdlIjoiaWQtSUQsaWQ7cT0wLjksZW4tVVM7cT0wLjgsZW47cT0wLjcifSkNCiAgICAgICAgICAgIHAgPSBzZXMuZ2V0KCJodHRwczovL21iYXNpYy5mYWNlYm9vay5jb20iKQ0KICAgICAgICAgICAgYiA9IHNlcy5wb3N0KCJodHRwczovL21iYXNpYy5mYWNlYm9vay5jb20vbG9naW4ucGhwIiwgZGF0YT17ImVtYWlsIjogdXNlciwgInBhc3MiOiBwdywgImxvZ2luIjogInN1Ym1pdCJ9KQ0KICAgICAgICAgICAgaWYgImNfdXNlciIgaW4gc2VzLmNvb2tpZXMuZ2V0X2RpY3QoKS5rZXlzKCk6DQogICAgICAgICAgICAJa3VraSA9ICgiOyIpLmpvaW4oWyAiJXM9JXMiICUgKGtleSwgdmFsdWUpIGZvciBrZXksIHZhbHVlIGluIHNlcy5jb29raWVzLmdldF9kaWN0KCkuaXRlbXMoKSBdKQ0KICAgICAgICAgICAgICAgIHByaW50ICdcciAgJXMqIC0tPiAlc3wlcyAgICAgICAgICAgICAgICAgJXMnICUgKEgsdXNlcixwdyxOKQ0KICAgICAgICAgICAgICAgIHdydCA9ICcgW+Kck10gJXN8JXN8JXMnICUgKHVzZXIscHcsa3VraSkNCiAgICAgICAgICAgICAgICBvay5hcHBlbmQod3J0KQ0KICAgICAgICAgICAgICAgIG9wZW4oJ3Jlc3VsdHMvT0stJXMtJXMtJXMudHh0JyAlIChoYSwgb3AsIHRhKSwgJ2EnKS53cml0ZSgnJXNcbicgJSB3cnQpDQogICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgZWxpZiAiY2hlY2twb2ludCIgaW4gc2VzLmNvb2tpZXMuZ2V0X2RpY3QoKS5rZXlzKCk6DQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICBudW51ID0gb3BlbigndG9rZW4udHh0JykucmVhZCgpDQogICAgICAgICAgICAgICAgICAgIGNwX3R0bCA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vJXM/YWNjZXNzX3Rva2VuPSVzJyUodXNlcixudW51KSkuanNvbigpWydiaXJ0aGRheSddDQogICAgICAgICAgICAgICAgICAgIG1vbnRoLCBkYXksIHllYXIgPSBjcF90dGwuc3BsaXQoJy8nKQ0KICAgICAgICAgICAgICAgICAgICBtb250aCA9IHRhcmlraF90dGxbbW9udGhdDQogICAgICAgICAgICAgICAgICAgIHByaW50ICdcciAgJXMqIC0tPiAlc3wlc3wlcyAlcyAlcyAgICAgJXMnICUgKEssdXNlcixwdyxkYXksbW9udGgseWVhcixOKQ0KICAgICAgICAgICAgICAgICAgICB3cnQgPSAnIFvDl10gJXN8JXN8JXMgJXMgJXMnICUgKHVzZXIscHcsZGF5LG1vbnRoLHllYXIpDQogICAgICAgICAgICAgICAgICAgIGNwLmFwcGVuZCh3cnQpDQogICAgICAgICAgICAgICAgICAgIG9wZW4oJ3Jlc3VsdHMvQ1AtJXMtJXMtJXMudHh0JyAlIChoYSwgb3AsIHRhKSwgJ2EnKS53cml0ZSgnJXNcbicgJSB3cnQpDQogICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgZXhjZXB0IChLZXlFcnJvciwgSU9FcnJvcik6DQogICAgICAgICAgICAgICAgICAgIG1vbnRoID0gJycNCiAgICAgICAgICAgICAgICAgICAgZGF5ICAgPSAnJw0KICAgICAgICAgICAgICAgICAgICB5ZWFyICA9ICcnDQogICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICBwYXNzDQoNCiAgICAgICAgICAgICAgICBwcmludCAnXHIgICVzKiAtLT4gJXN8JXMgICAgICAgICAgICAgICAgJXMnICUgKEssdXNlcixwdyxOKQ0KICAgICAgICAgICAgICAgIHdydCA9ICcgW8OXXSAlc3wlcycgJSAodXNlcixwdykNCiAgICAgICAgICAgICAgICBjcC5hcHBlbmQod3J0KQ0KICAgICAgICAgICAgICAgIG9wZW4oJ3Jlc3VsdHMvQ1AtJXMtJXMtJXMudHh0JyAlIChoYSwgb3AsIHRhKSwgJ2EnKS53cml0ZSgnJXNcbicgJSB3cnQpDQogICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICBjb250aW51ZQ0KDQogICAgICAgIGxvb3AgKz0gMQ0KDQogICAgZGVmIF9fbWZiX18oc2VsZiwgdXNlciwgX19heG1fXyk6DQogICAgICAgIGdsb2JhbCBvayxjcCxsb29wDQogICAgICAgIHN5cy5zdGRvdXQud3JpdGUoJ1xyIFslcyolc10gW0NSQUNLXSAlcy8lcyAtPiBPSy06JXMgLSBDUC06JXMgJyUoTyxOLGxvb3AsbGVuKHNlbGYuaWQpLGxlbihvayksbGVuKGNwKSkpLA0KICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkNCiAgICAgICAgZm9yIHB3IGluIF9fYXhtX186DQogICAgICAgICAgICBwdyA9IHB3Lmxvd2VyKCkNCiAgICAgICAgICAgIHRyeTogb3MubWtkaXIoJ3Jlc3VsdHMnKQ0KICAgICAgICAgICAgZXhjZXB0OiBwYXNzDQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAJX251bnUgPSBvcGVuKCd2YXVfdWEudHh0JywgJ3InKS5yZWFkKCkNCiAgICAgICAgICAgIGV4Y2VwdCAoS2V5RXJyb3IsIElPRXJyb3IpOg0KICAgICAgICAgICAgCV9udW51ID0gJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCAxMDsgTWkgOVQgUHJvIEJ1aWxkL1FLUTEuMTkwODI1LjAwMjsgd3YpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIENocm9tZS84OC4wLjQzMjQuMTgxIE1vYmlsZSBTYWZhcmkvNTM3LjM2IFtGQkFOL0VNQTtGQkxDL2lkX0lEO0ZCQVYvMjM5LjAuMC4xMC4xMDk7XScNCiAgICAgICAgICAgIHNlcyA9IHJlcXVlc3RzLlNlc3Npb24oKQ0KICAgICAgICAgICAgc2VzLmhlYWRlcnMudXBkYXRlKHsiSG9zdCI6Im0uZmFjZWJvb2suY29tIiwiY2FjaGUtY29udHJvbCI6Im1heC1hZ2U9MCIsInVwZ3JhZGUtaW5zZWN1cmUtcmVxdWVzdHMiOiIxIiwidXNlci1hZ2VudCI6X251bnUsImFjY2VwdCI6InRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgiLCJhY2NlcHQtZW5jb2RpbmciOiJnemlwLCBkZWZsYXRlIiwiYWNjZXB0LWxhbmd1YWdlIjoiaWQtSUQsaWQ7cT0wLjksZW4tVVM7cT0wLjgsZW47cT0wLjcifSkNCiAgICAgICAgICAgIHAgPSBzZXMuZ2V0KCJodHRwczovL20uZmFjZWJvb2suY29tIikNCiAgICAgICAgICAgIGIgPSBzZXMucG9zdCgiaHR0cHM6Ly9tLmZhY2Vib29rLmNvbS9sb2dpbi5waHAiLCBkYXRhPXsiZW1haWwiOiB1c2VyLCAicGFzcyI6IHB3LCAibG9naW4iOiAic3VibWl0In0pDQogICAgICAgICAgICBpZiAiY191c2VyIiBpbiBzZXMuY29va2llcy5nZXRfZGljdCgpLmtleXMoKToNCiAgICAgICAgICAgIAlrdWtpID0gKCI7Iikuam9pbihbICIlcz0lcyIgJSAoa2V5LCB2YWx1ZSkgZm9yIGtleSwgdmFsdWUgaW4gc2VzLmNvb2tpZXMuZ2V0X2RpY3QoKS5pdGVtcygpIF0pDQogICAgICAgICAgICAgICAgcHJpbnQgJ1xyICAlcyogLS0+ICVzfCVzICAgICAgICAgICAgICAgICAlcycgJSAoSCx1c2VyLHB3LE4pDQogICAgICAgICAgICAgICAgd3J0ID0gJyBb4pyTXSAlc3wlc3wlcycgJSAodXNlcixwdyxrdWtpKQ0KICAgICAgICAgICAgICAgIG9rLmFwcGVuZCh3cnQpDQogICAgICAgICAgICAgICAgb3BlbigncmVzdWx0cy9PSy0lcy0lcy0lcy50eHQnICUgKGhhLCBvcCwgdGEpLCAnYScpLndyaXRlKCclc1xuJyAlIHdydCkNCiAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICBlbGlmICJjaGVja3BvaW50IiBpbiBzZXMuY29va2llcy5nZXRfZGljdCgpLmtleXMoKToNCiAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgIG51bnUgPSBvcGVuKCd0b2tlbi50eHQnKS5yZWFkKCkNCiAgICAgICAgICAgICAgICAgICAgY3BfdHRsID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS8lcz9hY2Nlc3NfdG9rZW49JXMnJSh1c2VyLG51bnUpKS5qc29uKClbJ2JpcnRoZGF5J10NCiAgICAgICAgICAgICAgICAgICAgbW9udGgsIGRheSwgeWVhciA9IGNwX3R0bC5zcGxpdCgnLycpDQogICAgICAgICAgICAgICAgICAgIG1vbnRoID0gdGFyaWtoX3R0bFttb250aF0NCiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xyICAlcyogLS0+ICVzfCVzfCVzICVzICVzICAgICAlcycgJSAoSyx1c2VyLHB3LGRheSxtb250aCx5ZWFyLE4pDQogICAgICAgICAgICAgICAgICAgIHdydCA9ICcgW8OXXSAlc3wlc3wlcyAlcyAlcycgJSAodXNlcixwdyxkYXksbW9udGgseWVhcikNCiAgICAgICAgICAgICAgICAgICAgY3AuYXBwZW5kKHdydCkNCiAgICAgICAgICAgICAgICAgICAgb3BlbigncmVzdWx0cy9DUC0lcy0lcy0lcy50eHQnICUgKGhhLCBvcCwgdGEpLCAnYScpLndyaXRlKCclc1xuJyAlIHdydCkNCiAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICBleGNlcHQgKEtleUVycm9yLCBJT0Vycm9yKToNCiAgICAgICAgICAgICAgICAgICAgbW9udGggPSAnJw0KICAgICAgICAgICAgICAgICAgICBkYXkgICA9ICcnDQogICAgICAgICAgICAgICAgICAgIHllYXIgID0gJycNCiAgICAgICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgICAgIHBhc3MNCg0KICAgICAgICAgICAgICAgIHByaW50ICdcciAgJXMqIC0tPiAlc3wlcyAgICAgICAgICAgICAgICAlcycgJSAoSyx1c2VyLHB3LE4pDQogICAgICAgICAgICAgICAgd3J0ID0gJyBbw5ddICVzfCVzJyAlICh1c2VyLHB3KQ0KICAgICAgICAgICAgICAgIGNwLmFwcGVuZCh3cnQpDQogICAgICAgICAgICAgICAgb3BlbigncmVzdWx0cy9DUC0lcy0lcy0lcy50eHQnICUgKGhhLCBvcCwgdGEpLCAnYScpLndyaXRlKCclc1xuJyAlIHdydCkNCiAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgIGNvbnRpbnVlDQoNCiAgICAgICAgbG9vcCArPSAxDQoNCiAgICBkZWYgX19wbGVyX18oc2VsZik6DQogICAgICAgIGF4bSA9IHJhd19pbnB1dCgnXG4gWypdIE1FVEhPRCA6ICcpDQogICAgICAgIGlmIGF4bSA9PSAnJzoNCiAgICAgICAgICAgIHByaW50ICJcbiAlc1slc8OXJXNdIERPTidUIExFQVZFIElUIEVNUFRZIEJSTyIlKE4sTSxOKTtzZWxmLl9fcGxlcl9fKCkNCiAgICAgICAgZWxpZiBheG0gaW4gKCcxJywgJzAxJyk6DQogICAgICAgICAgICBwcmludCAnXG4gWyVzKyVzXSBPSyBSRVNVTFRTIEFSRSBTQVZFRCBUTyAtPiBSRVNVTFRTL09LLSVzLSVzLSVzLnR4dCclKE8sTixoYSwgb3AsIHRhKQ0KICAgICAgICAgICAgcHJpbnQgJyBbJXMrJXNdIENQIFJFU1VMVFMgQVJFIFNBVkVEIFRPIC0+IFJFU1VMVFMvQ1AtJXMtJXMtJXMudHh0JyUoTyxOLGhhLCBvcCwgdGEpDQogICAgICAgICAgICBwcmludCAnXG4gWyVzISVzXSBZT1UgQ0FOIFRVUk4gT0ZGIE1PQklMRSBEQVRBIFRPIFBBVVNFIFRIRSBDUkFDSyBQUk9DRVNTXG4nJShNLE4pDQogICAgICAgICAgICB3aXRoIGF4aW1feGF1KG1heF93b3JrZXJzPTMwKSBhcyAoX19hemltVmF1X18pOg0KICAgICAgICAgICAgCWZvciBhem14IGluIHNlbGYuaWQ6IA0KICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICB1aWQsIG5hbWUgPSBhem14LnNwbGl0KCc8PT4nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgeHogPSBuYW1lLnNwbGl0KCcgJykNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxlbih4eikgPT0gMyBvciBsZW4oeHopID09IDQgb3IgbGVuKHh6KSA9PSA1IG9yIGxlbih4eikgPT0gNjoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bnggPSBbbmFtZS5sb3dlcigpLCB4elswXSt4elsxXS5sb3dlcigpLCB4elswXSt4elsxXS5sb3dlcigpKyIxMjMiLCB4elswXSsiMTIzIiwgeHpbMV0ubG93ZXIoKSsiMTIzIiwgeHpbMF0ubG93ZXIoKSsiMTIzNCIsIHh6WzBdLmxvd2VyKCkrIjEyMzQ1Il0NCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgeG54ID0gW25hbWUubG93ZXIoKSwgeHpbMF0reHpbMV0ubG93ZXIoKSwgeHpbMF0rIjEyMyIsIHh6WzFdLmxvd2VyKCkrIjEyMyIsIHh6WzBdLmxvd2VyKCkrIjEyMzQiLCB4elswXS5sb3dlcigpKyIxMjM0NSJdDQogICAgICAgICAgICAgICAgICAgICAgICBfX2F6aW1WYXVfXy5zdWJtaXQoc2VsZi5fX2FwaV9fLCB1aWQsIHhueCkNCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICAgICAgcGFzcw0KDQogICAgICAgICAgICBvcy5yZW1vdmUoc2VsZi5hcGspDQogICAgICAgICAgICByZXN1KG9rLGNwKQ0KICAgICAgICBlbGlmIGF4bSBpbiAoJzInLCAnMDInKToNCiAgICAgICAgICAgIHByaW50ICdcbiBbJXMrJXNdIE9LIFJFU1VMVFMgQVJFIFNBVkVEIFRPIC0+IFJFU1VMVFMvT0stJXMtJXMtJXMudHh0JyUoTyxOLGhhLCBvcCwgdGEpDQogICAgICAgICAgICBwcmludCAnIFslcyslc10gQ1AgUkVTVUxUUyBBUkUgU0FWRUQgVE8gLT4gUkVTVUxUUy9DUC0lcy0lcy0lcy50eHQnJShPLE4saGEsIG9wLCB0YSkNCiAgICAgICAgICAgIHByaW50ICdcbiBbJXMhJXNdIFlPVSBDQU4gVFVSTiBPRkYgTU9CSUxFIERBVEEgVE8gUEFVU0UgVEhFIENSQUNLIFBST0NFU1NcbiclKE0sTikNCiAgICAgICAgICAgIHdpdGggYXhpbV94YXUobWF4X3dvcmtlcnM9MzApIGFzIChfX2F6aW1WYXVfXyk6DQogICAgICAgICAgICAJZm9yIGF6bXggaW4gc2VsZi5pZDogDQogICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgIHVpZCwgbmFtZSA9IGF6bXguc3BsaXQoJzw9PicpDQogICAgICAgICAgICAgICAgICAgICAgICB4eiA9IG5hbWUuc3BsaXQoJyAnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgbGVuKHh6KSA9PSAzIG9yIGxlbih4eikgPT0gNCBvciBsZW4oeHopID09IDUgb3IgbGVuKHh6KSA9PSA2Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhueCA9IFtuYW1lLmxvd2VyKCksIHh6WzBdK3h6WzFdLmxvd2VyKCksIHh6WzBdK3h6WzFdLmxvd2VyKCkrIjEyMyIsIHh6WzBdKyIxMjMiLCB4elsxXS5sb3dlcigpKyIxMjMiLCB4elswXS5sb3dlcigpKyIxMjM0IiwgeHpbMF0ubG93ZXIoKSsiMTIzNDUiXQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bnggPSBbbmFtZS5sb3dlcigpLCB4elswXSt4elsxXS5sb3dlcigpLCB4elswXSsiMTIzIiwgeHpbMV0ubG93ZXIoKSsiMTIzIiwgeHpbMF0ubG93ZXIoKSsiMTIzNCIsIHh6WzBdLmxvd2VyKCkrIjEyMzQ1Il0NCiAgICAgICAgICAgICAgICAgICAgICAgIF9fYXppbVZhdV9fLnN1Ym1pdChzZWxmLl9fbWJhc2ljX18sIHVpZCwgeG54KQ0KICAgICAgICAgICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgICAgICAgICBwYXNzDQoNCiAgICAgICAgICAgIG9zLnJlbW92ZShzZWxmLmFwaykNCiAgICAgICAgICAgIHJlc3Uob2ssY3ApDQogICAgICAgIGVsaWYgYXhtIGluICgnMycsICcwMycpOg0KICAgICAgICAgICAgcHJpbnQgJ1xuIFslcyslc10gT0sgUkVTVUxUUyBBUkUgU0FWRUQgVE8gLT4gUkVTVUxUUy9PSy0lcy0lcy0lcy50eHQnJShPLE4saGEsIG9wLCB0YSkNCiAgICAgICAgICAgIHByaW50ICcgWyVzKyVzXSBDUCBSRVNVTFRTIEFSRSBTQVZFRCBUTyAtPiBSRVNVTFRTL0NQLSVzLSVzLSVzLnR4dCclKE8sTixoYSwgb3AsIHRhKQ0KICAgICAgICAgICAgcHJpbnQgJ1xuIFslcyElc10gWU9VIENBTiBUVVJOIE9GRiBNT0JJTEUgREFUQSBUTyBQQVVTRSBUSEUgQ1JBQ0sgUFJPQ0VTU1xuJyUoTSxOKQ0KICAgICAgICAgICAgd2l0aCBheGltX3hhdShtYXhfd29ya2Vycz0zMCkgYXMgKF9fYXppbVZhdV9fKToNCiAgICAgICAgICAgIAlmb3IgYXpteCBpbiBzZWxmLmlkOg0KICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICB1aWQsIG5hbWUgPSBhem14LnNwbGl0KCc8PT4nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgeHogPSBuYW1lLnNwbGl0KCcgJykNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxlbih4eikgPT0gMyBvciBsZW4oeHopID09IDQgb3IgbGVuKHh6KSA9PSA1IG9yIGxlbih4eikgPT0gNjoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bnggPSBbbmFtZS5sb3dlcigpLCB4elswXSt4elsxXS5sb3dlcigpLCB4elswXSt4elsxXS5sb3dlcigpKyIxMjMiLCB4elswXSsiMTIzIiwgeHpbMV0ubG93ZXIoKSsiMTIzIiwgeHpbMF0ubG93ZXIoKSsiMTIzNCIsIHh6WzBdLmxvd2VyKCkrIjEyMzQ1Il0NCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgeG54ID0gW25hbWUubG93ZXIoKSwgeHpbMF0reHpbMV0ubG93ZXIoKSwgeHpbMF0rIjEyMyIsIHh6WzFdLmxvd2VyKCkrIjEyMyIsIHh6WzBdLmxvd2VyKCkrIjEyMzQiLCB4elswXS5sb3dlcigpKyIxMjM0NSJdDQogICAgICAgICAgICAgICAgICAgICAgICBfX2F6aW1WYXVfXy5zdWJtaXQoc2VsZi5fX21mYl9fLCB1aWQsIHhueCkNCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICAgICAgcGFzcw0KDQogICAgICAgICAgICBvcy5yZW1vdmUoc2VsZi5hcGspDQogICAgICAgICAgICByZXN1KG9rLGNwKQ0KDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBwcmludCAnXG4gJXNbJXPDlyVzXSBXUk9ORyBJTlBVVCclKE4sTSxOKTtzZWxmLl9fcGxlcl9fKCkNCg0KaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoNCiAgICBvcy5zeXN0ZW0oJ2dpdCBwdWxsJykNCiAgICBtcl9lcnJvcigpDQo="))